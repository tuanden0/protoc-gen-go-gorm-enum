package protocgengogormenum

import (
	"fmt"

	"google.golang.org/protobuf/compiler/protogen"
)

// GenerateEnumFile generates a __gorm_enum.pb.go file containing enum gorm definitions.
func GenerateEnumFile(gen *protogen.Plugin, file *protogen.File) *protogen.GeneratedFile {
	hasEnum := false
	if len(file.Enums) != 0 {
		hasEnum = true
	}

	for _, msg := range file.Messages {
		if len(msg.Enums) != 0 {
			hasEnum = true

			break
		}
	}

	if !hasEnum {
		return nil
	}

	filename := file.GeneratedFilenamePrefix + "_gorm_enum.pb.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	g.P("// Code generated by protoc-gen-go-gorm-enum. DO NOT EDIT.")
	g.P()
	g.P("package ", file.GoPackageName)
	g.P()
	g.P(`import "database/sql/driver"`)
	g.P()

	for _, enum := range file.Enums {
		str := fmt.Sprintf(`func (x *%[1]s) Scan(value any) error {
	*x = %[1]s(%[1]s_value[string(value.([]byte))])

	return nil
}

func (x *%[1]s) Value() (driver.Value, error) {
	return x.String(), nil
}`, enum.GoIdent.GoName)

		g.P(str)
		g.P()
	}

	for _, msg := range file.Messages {
		for _, enum := range msg.Enums {
			str := fmt.Sprintf(`func (x *%[1]s) Scan(value any) error {
	*x = %[1]s(%[1]s_value[string(value.([]byte))])

	return nil
}

func (x *%[1]s) Value() (driver.Value, error) {
	return x.String(), nil
}`, enum.GoIdent.GoName)

			g.P(str)
			g.P()
		}
	}

	return g
}
